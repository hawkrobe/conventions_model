///fold:
var softplus = function(x) {
    return Math.log(Math.exp(x) + 1);
};

var getTrajectories = function(data) {
  var keys = _.keys(data[0]);
  return reduce(function(key, memo) {
    var timeBasedKeys = map(function(i) {return key + "." + i;}, _.range(data.length));
    var vals = _.map(data, key);
    return extend(_.zipObject(timeBasedKeys, vals), memo);
  }, [], keys);
};
///

// possible states of the world
var states = ['t1', 't2'];
var statePrior =  Categorical({vs: states, ps: [1/2, 1/2]});

// possible utterances
var utterances = ['label1', 'label2'];
var utterancePrior = Categorical({vs: utterances, ps: [1/2, 1/2]});

// var params = {
//   alpha: 5,
//   beta: 1,
//   numSteps: 3
// };

// If the param exists in the store, use it as prior; otherwise use initial prior
var getBetaParam = function(paramName, uniqueID, roundNum) {
  if(roundNum > 0) {
    var label = [paramName, uniqueID, roundNum].join('_');
    return T.toScalars(getParams()[label][0])[0];
  } else if(paramName == 'mu') {
    return 0;
  } else if(paramName == 'sigma') {
    return 1;
  }
};

// takes a sample from a logit normal distribution for each word,
// representing the extent to which that word describes each object
// at an implementational level, we use the params from the previous
// step as the prior for next step, so that we only condition on the most recent obs
var lexiconPrior = function(){
  var meanings = map(function(utt) {
    var uniqueID = [utt, globalStore.originAgent].join('_');
    var currRound = globalStore.roundNum;
    var oldRound = currRound - 1;
    
    var betaGuide = function() {
      return LogitNormal({
	mu: param({name: ['mu', uniqueID, currRound].join('_')}),
	sigma: softplus(param({name: ['sigma', uniqueID, currRound].join('_')})),
	a: 0, b: 1
      });
    };
    
    var t1Prob = sample(LogitNormal({
      mu: getBetaParam('mu', uniqueID, oldRound),
      sigma: softplus(getBetaParam('sigma', uniqueID, oldRound)),
      a: 0, b: 1
    }), {guide: betaGuide});
    
    return {'t1' : t1Prob, 't2' : 1-t1Prob};
  }, utterances);
  return _.zipObject(utterances, meanings);
};

// length-based cost (although they're all the same length here)
var uttCost = function(utt) {
  return utt.split(' ').length;
};

// literal listener (using real-valued lexicon)
var L0 = function(utt, lexicon) {
  return Infer({method:"enumerate"}, function(){
    var state = sample(statePrior);
    factor(Math.log(lexicon[utt][state]));
    return state;
  });
};

// pragmatic speaker 
var S1 = function(state, lexicon) {
  return Infer({method:"enumerate"}, function(){
    var utt = sample(utterancePrior);
    factor(params.alpha[0] * (L0(utt, lexicon).score(state))
           - params.beta[0] * uttCost(utt));
    return utt;
  });
};

// conventional listener
var L1 = function(utt, lexicon) {
  return Infer({method:"enumerate"}, function(){
    var state = sample(statePrior);
    observe(S1(state, lexicon), utt);
    return state;
  });
};

var lexiconModel = function() {
  var lexicon = lexiconPrior();
  if(globalStore.data.length > 0) {
    mapData({data: globalStore.data}, function(datum){
      if(globalStore.originAgent == 'L')
	observe(S1(datum.response, lexicon), datum['utt']);
      else if(globalStore.originAgent == 'S')
	observe(L1(datum.utt, lexicon), datum['response']);
    });
  }
  return lexicon;
};

// compute lexicon posterior, taking into account some previous observations
// speakers do this by assuming data came from knowledgable listener, and vice versa
var updateBeliefs = function(originAgent, data) {
  // Only condition on most recent datapoint, since we're using learned params as prior
  globalStore.data = data;//_.isEmpty(data) ? [] : [_.last(data)];
  globalStore.originAgent = originAgent;
  globalStore.roundNum = data.length;

  Optimize({model: lexiconModel,
	    method: 'optimize', steps: 1000, verbose: false,
	    optMethod: {adam: {stepSize: .01}}});
};

// conventional listener (L1, marginalizing over lexicons)
var L = cache(function(utt, data) {
  updateBeliefs('L', data);
  return Infer({method: 'forward', samples: 250, guide: true, model: function() {
    var dist = L1(utt, lexiconPrior());
    return sample(dist, {guide() {return dist;}});
  }});
});

// conventional speaker (S1, reasoning about expected L1 behavior across lexicons)
// use importance sampling from optimized lexicon prior
var S = cache(function(state, data) {
  updateBeliefs('S', data);
  return Infer({method: 'enumerate'}, function(){
    var utt = sample(utterancePrior);

    var expectedUtility = expectation(Infer({method: 'forward', samples: 100, guide: true, model: function() {
      var listener = L1(utt, lexiconPrior());
      return params.alpha[0]  * listener.score(state) - params.beta[0] * uttCost(utt);
    }}));
    
    factor(expectedUtility);

    return utt;
  });
});

var model = function() {
  console.log('sample...');
  var step = function(data) {
    if(data.length > params.numSteps[0]) return getTrajectories(data);
    var state = sample(statePrior);
    var utt = sample(S(state, data));
    var response = sample(L(utt, data));
    var newDatum = {utt, response, intended: state, acc: state == response};
    return step(data.concat(newDatum));
  };
  step([]);
};
