// run using, e.g.:
// webppl partnerspecificity.wppl --require ./refModule/ --require webppl-csv

var unconstrainedUtterances = ['word1', 'word2', 'word3', 'word4'];
var derivedUtterances = ['word1_word2', 'word3_word4']//, 'word1_word3', 'word1_word4',
//                         'word2_word3', 'word2_word4']; 
var utterances = unconstrainedUtterances.concat(derivedUtterances);
var objects = ['bluecircle', 'redsquare'];
var meanings = ['bluecircle', 'redsquare'];
var numMeanings = meanings.length;

var params = {
  speakerAlpha : argv.speakerAlpha,
  listenerAlpha: argv.listenerAlpha,
  discountFactor: argv.discountFactor,
  costWeight: argv.costWeight,
  guessingEpsilon: argv.guessingEpsilon,
  model: argv.model,
  chainNum: argv.chainNum,
  context: objects,
  utterances: utterances,
  objects: objects,
  inferOptions: {method: 'MCMC', samples:2000, burn:10000, lag:30, verbose:true} 
};

console.log(params);
var f = csv.open('./output/' + argv.model + argv.chainNum + '.csv');
csv.writeLine('iterationNum,model,chainNum,speakerAlpha,listenerAlpha,costWeight,discountFactor,guessingEpsilon,'+
              'trialNum,speakerID,listenerID,partnerID,intendedName,speakerChoice,listenerChoice,'+
              'longUttScore,longUttScore_unseenPartner,correctProb', f);

var writeLine = function(currTrial, listenerChoice, speakerChoice, speakerOutput, listenerOutput, speakerPosterior) {
  var hypotheticalNewPartner = S(currTrial.intendedName, speakerPosterior, extend(params, {partnerID: 4}));
  csv.writeLine([
    currTrial.iterationNum, params.model, params.chainNum, params.speakerAlpha, params.listenerAlpha,
    params.costWeight, params.discountFactor, params.guessingEpsilon,
    currTrial.trialNum, currTrial.speakerID, currTrial.listenerID, currTrial.partnerID,
    currTrial.intendedName, speakerChoice, listenerChoice,
    Math.exp(speakerOutput.score('word1_word2')) + Math.exp(speakerOutput.score('word3_word4')),
    Math.exp(hypotheticalNewPartner.score('word1_word2')) + Math.exp(hypotheticalNewPartner.score('word3_word4')),
    listenerOutput.score(currTrial.intendedName),
  ].join(','), f);
};

var sampleProbs = function(utt) {
  // note that the expectated value of a dirichlet w/ this prior is [.4, .6]
  var bias = utt == 'word1' || utt == 'word2' ? [1.05, 0.95] : [0.95, 1.05];
  var hyperConcentration = dirichlet(Vector(bias));
  return T.mul(hyperConcentration, 10);
};

var lexicalPrior = function() {
  var partnerMeaning = map(function(utt) {
    if(params.model == 'no_pooling') {
      var bias = sampleProbs(utt);
      return {
        partnerBeliefs: [
          categorical({vs: meanings, ps: dirichlet(bias)}), categorical({vs: meanings, ps: dirichlet(bias)}),
          categorical({vs: meanings, ps: dirichlet(bias)}), categorical({vs: meanings, ps: dirichlet(bias)})
        ]
      };
    } else if (params.model == 'complete_pooling') {
      var sharedMeaning = categorical({vs: meanings, ps: dirichlet(sampleProbs(utt))});
      return {
        partnerBeliefs: [sharedMeaning, sharedMeaning, sharedMeaning, sharedMeaning]
      };
    } else {
      var concentration = sampleProbs(utt);
      var popPs = dirichlet(concentration);
      return {
        partnerBeliefs: [
          categorical({vs: meanings, ps: popPs}), categorical({vs: meanings, ps: popPs}),
          categorical({vs: meanings, ps: popPs}), categorical({vs: meanings, ps: popPs})]
      };
    }
  }, unconstrainedUtterances);
  return {
    '1' : {
      'word1' : partnerMeaning[0].partnerBeliefs[0], 'word2' : partnerMeaning[1].partnerBeliefs[0],
      'word3' : partnerMeaning[2].partnerBeliefs[0], 'word4' : partnerMeaning[3].partnerBeliefs[0]
    },
    '2' : { 
      'word1' : partnerMeaning[0].partnerBeliefs[1], 'word2' : partnerMeaning[1].partnerBeliefs[1],
      'word3' : partnerMeaning[2].partnerBeliefs[1], 'word4' : partnerMeaning[3].partnerBeliefs[1],
    },
    '3' : {
      'word1' : partnerMeaning[0].partnerBeliefs[2], 'word2' : partnerMeaning[1].partnerBeliefs[2],
      'word3' : partnerMeaning[2].partnerBeliefs[2], 'word4' : partnerMeaning[3].partnerBeliefs[2],
    },
    '4' : {
      'word1' : partnerMeaning[0].partnerBeliefs[3], 'word2' : partnerMeaning[1].partnerBeliefs[3],
      'word3' : partnerMeaning[2].partnerBeliefs[3], 'word4' : partnerMeaning[3].partnerBeliefs[3]
    }
  }
};

// for each point in data, we want the model's predictions 
var iterate = function(iterationNum, remainingTrials, dataSoFar) {
  var trialInfo = first(remainingTrials);
  var repNum =  Math.floor((trialInfo.trialNum - 1) / 2);
  var speakerID = (((trialInfo.trialNum - 1) % 8 == 0) ?
                   uniformDraw(trialInfo.participants) :
                   ((trialInfo.trialNum - 1) % 2) == 0 ?
                   remove(last(dataSoFar[trialInfo.participants[0]]).speakerID,
                          trialInfo.participants)[0] :
                   last(dataSoFar[trialInfo.participants[0]]).speakerID);
  var listenerID =  remove(speakerID, trialInfo.participants)[0];
  var currTrial = extend(trialInfo, {
    iterationNum: iterationNum,
    speakerID: speakerID,
    listenerID: listenerID,
    context : objects,
  });

  // run inference on previous data
  var speakerPosterior = updatePosterior(dataSoFar[currTrial.speakerID], lexicalPrior, params);
  var listenerPosterior = updatePosterior(dataSoFar[currTrial.listenerID], lexicalPrior, params);

  // get marginal prediction of next data point over lexicon posterior
  var trialParams = extend(params, {partnerID: currTrial.partnerID});
  var speakerOutput = S(currTrial.intendedName, speakerPosterior, trialParams);
  var nextUtt = sample(speakerOutput);
  var listenerOutput = L(nextUtt, listenerPosterior, trialParams);
  var nextChoice = sample(listenerOutput);
  console.log(currTrial)
  console.log(speakerOutput)
  console.log(listenerOutput)
  writeLine(currTrial, nextUtt, nextChoice, speakerOutput, listenerOutput, speakerPosterior);
  var newDataSoFar = _.zipObject(_.range(1, 5), map(function(id) {
    var trialPacket = extend(currTrial, {
      role: id == currTrial.speakerID ? "speaker" : "listener",
      wordID: nextUtt,
      clickedName: nextChoice
    });
    return (id == currTrial.speakerID || id == currTrial.listenerID ?
            dataSoFar[id].concat(trialPacket) : dataSoFar[id]);
  }, _.range(1, 5)));

  if(!_.isEmpty(rest(remainingTrials))) {
    iterate(iterationNum, rest(remainingTrials), newDataSoFar);
  }
};

var trials = [
  // first partner
  {trialNum: 1, participants: [1,2], partnerID: 1, intendedName: 'bluecircle'},
  {trialNum: 2, participants: [1,2], partnerID: 1, intendedName: 'redsquare'},
  {trialNum: 3, participants: [1, 2], partnerID: 1, intendedName: 'bluecircle'},
  {trialNum: 4, participants: [1,2], partnerID: 1, intendedName: 'redsquare'},
  {trialNum: 5, participants: [2,1], partnerID: 1, intendedName: 'bluecircle'},
  {trialNum: 6, participants: [2,1], partnerID: 1, intendedName: 'redsquare'},
  {trialNum: 7, participants: [1,2], partnerID: 1, intendedName: 'bluecircle'},
  {trialNum: 8, participants: [1,2], partnerID: 1, intendedName: 'redsquare'},

  {trialNum: 1, participants: [4,3], partnerID: 1, intendedName: 'bluecircle'},
  {trialNum: 2, participants: [4,3], partnerID: 1, intendedName: 'redsquare'},
  {trialNum: 3, participants: [3,4], partnerID: 1, intendedName: 'bluecircle'},
  {trialNum: 4, participants: [3,4], partnerID: 1, intendedName: 'redsquare'},
  {trialNum: 5, participants: [4,3], partnerID: 1, intendedName: 'bluecircle'},
  {trialNum: 6, participants: [4,3], partnerID: 1, intendedName: 'redsquare'},
  {trialNum: 7, participants: [3,4], partnerID: 1, intendedName: 'bluecircle'},
  {trialNum: 8, participants: [3,4], partnerID: 1, intendedName: 'redsquare'},

  // second partner
  {trialNum: 9, participants: [3,1], partnerID: 2, intendedName: 'bluecircle'},
  {trialNum: 10, participants: [3,1], partnerID: 2, intendedName: 'redsquare'},
  {trialNum: 11, participants: [1,3], partnerID: 2, intendedName: 'bluecircle'},
  {trialNum: 12, participants: [1,3], partnerID: 2, intendedName: 'redsquare'},
  {trialNum: 13, participants: [3,1], partnerID: 2, intendedName: 'bluecircle'},
  {trialNum: 14, participants: [3,1], partnerID: 2, intendedName: 'redsquare'},
  {trialNum: 15, participants: [1,3], partnerID: 2, intendedName: 'bluecircle'},
  {trialNum: 16, participants: [1,3], partnerID: 2, intendedName: 'redsquare'},

  {trialNum: 9,  participants: [4,2], partnerID: 2, intendedName: 'bluecircle'},
  {trialNum: 10, participants: [4,2], partnerID: 2, intendedName: 'redsquare'},
  {trialNum: 11, participants: [2,4], partnerID: 2, intendedName: 'bluecircle'},
  {trialNum: 12, participants: [2,4], partnerID: 2, intendedName: 'redsquare'},
  {trialNum: 13, participants: [4,2], partnerID: 2, intendedName: 'bluecircle'},
  {trialNum: 14, participants: [4,2], partnerID: 2, intendedName: 'redsquare'},
  {trialNum: 15, participants: [2,4], partnerID: 2, intendedName: 'bluecircle'},
  {trialNum: 16, participants: [2,4], partnerID: 2, intendedName: 'redsquare'},

  // third partner
  {trialNum: 17, participants: [4,1], partnerID: 3, intendedName: 'bluecircle'},
  {trialNum: 18, participants: [4,1], partnerID: 3, intendedName: 'redsquare'},
  {trialNum: 19, participants: [1,4], partnerID: 3, intendedName: 'bluecircle'},
  {trialNum: 20, participants: [1,4], partnerID: 3, intendedName: 'redsquare'},
  {trialNum: 21, participants: [4,1], partnerID: 3, intendedName: 'bluecircle'},
  {trialNum: 22, participants: [4,1], partnerID: 3, intendedName: 'redsquare'},
  {trialNum: 23, participants: [1,4], partnerID: 3, intendedName: 'bluecircle'},
  {trialNum: 24, participants: [1,4], partnerID: 3, intendedName: 'redsquare'},

  {trialNum: 17, participants: [3,2], partnerID: 3, intendedName: 'bluecircle'},
  {trialNum: 18, participants: [3,2], partnerID: 3, intendedName: 'redsquare'},
  {trialNum: 19, participants: [2,3], partnerID: 3, intendedName: 'bluecircle'},
  {trialNum: 20, participants: [2,3], partnerID: 3, intendedName: 'redsquare'},
  {trialNum: 21, participants: [3,2], partnerID: 3, intendedName: 'bluecircle'},
  {trialNum: 22, participants: [3,2], partnerID: 3, intendedName: 'redsquare'},
  {trialNum: 23, participants: [2,3], partnerID: 3, intendedName: 'bluecircle'},
  {trialNum: 24, participants: [2,3], partnerID: 3, intendedName: 'redsquare'},
  // generalization
  // {trialNum: 25, speakerID: 1, listenerID: 5, partnerID: 4, intendedName: 'bluecircle'},  
  // {trialNum: 25, speakerID: 2, listenerID: 5, partnerID: 4, intendedName: 'bluecircle'},  
  // {trialNum: 25, speakerID: 3, listenerID: 5, partnerID: 4, intendedName: 'bluecircle'},  
  // {trialNum: 25, speakerID: 4, listenerID: 5, partnerID: 4, intendedName: 'bluecircle'},  
];

foreach(_.range(100), function(i) {
  console.log('iteration', i)
  iterate(i, trials, {1: [], 2: [], 3: [], 4: []});
});
csv.close(f);
