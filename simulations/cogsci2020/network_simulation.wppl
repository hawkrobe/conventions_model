// run using, e.g.:
// webppl partnerspecificity.wppl --require ./refModule/ --require webppl-csv

var unconstrainedUtterances = ['word1', 'word2', 'word3', 'word4'];
var derivedUtterances = ['word1_word2', 'word3_word4']; 
var utterances = unconstrainedUtterances.concat(derivedUtterances);
var objects = ['bluecircle', 'redsquare'];
var meanings = ['bluecircle', 'redsquare'];
var numMeanings = meanings.length;

var params = {
  speakerAlpha : argv.speakerAlpha,
  listenerAlpha: argv.listenerAlpha,
  discountFactor: argv.discountFactor,
  costWeight: argv.costWeight,
  guessingEpsilon: argv.guessingEpsilon,
  model: argv.model,
  numTrials: 14,
  context: objects,
  utterances: utterances,
  objects: objects,
  inferOptions: {method: 'MCMC', samples:5000, burn:10000, lag:5, verbose:true}
};

console.log(params);
var f = csv.open('./output/' + argv.model + argv.chainNum + '.csv');
csv.writeLine('model,chainNum,speakerAlpha,listenerAlpha,costWeight,discountFactor,guessingEpsilon,\
              trialNum,speakerID,listenerID,partnerID,intendedName,speakerChoice,listenerChoice,\
              longUttScore,correctProb', f);

var writeLine = function(currTrial, listenerChoice, speakerChoice, speakerOutput, listenerOutput) {
  csv.writeLine([
    params.model, params.chainNum, params.speakerAlpha, params.listenerAlpha,
    params.costWeight, params.discountFactor, params.guessingEpsilon,
    currTrial.trialNum, currTrial.speakerID, currTrial.listenerID, currTrial.partnerID,
    currTrial.intendedName, speakerChoice, listenerChoice,
    Math.exp(speakerOutput.score('word1_word2')) + Math.exp(speakerOutput.score('word3_word4')),
    listenerOutput.score(currTrial.intendedName),
  ].join(','), f);
};

var sampleProbs = function(utt) {
  var bias = utt == 'word1' || utt == 'word2' ? [.9, 1.1] : [1.1,.9];
  var hyperConcentration = Vector(bias);
  var hyperScale = exponential({a: 1});
  return T.mul(hyperConcentration, hyperScale);
};

var lexicalPrior = function() {
  var partnerMeaning = map(function(utt) {
    if(params.model == 'no_pooling') {
      var ps = utt == 'word1' || utt == 'word2' ? [.4,.6] : [.6, .4];
      return repeat(4, function() {return categorical({vs: meanings, ps: ps});});
    } else if (params.model == 'complete_pooling') {
      var sharedLexicon = categorical({vs: meanings, ps: dirichlet(sampleProbs(utt))});
      return repeat(4, function() {return sharedLexicon;});
    } else {
      var hyperParams = dirichlet(sampleProbs(utt));
      return repeat(4, function() {return categorical({vs: meanings, ps: hyperParams});});
    }
  }, unconstrainedUtterances);
  return {
    '1' : {
      'word1' : partnerMeaning[0][0], 'word2' : partnerMeaning[1][0],
      'word3' : partnerMeaning[2][0], 'word4' : partnerMeaning[3][0]
    },
    '2' : { 
      'word1' : partnerMeaning[0][1], 'word2' : partnerMeaning[1][1],
      'word3' : partnerMeaning[2][1], 'word4' : partnerMeaning[3][1],
    },
    '3' : {
      'word1' : partnerMeaning[0][2], 'word2' : partnerMeaning[1][2],
      'word3' : partnerMeaning[2][2], 'word4' : partnerMeaning[3][2],
    },
    '4' : {
      'word1' : partnerMeaning[0][3], 'word2' : partnerMeaning[1][3],
      'word3' : partnerMeaning[2][3], 'word4' : partnerMeaning[3][3]
    }
  }
};

// for each point in data, we want the model's predictions 
var iterate = function(outputFile, remainingTrials, dataSoFar) {
  var currTrial = extend(first(remainingTrials), {
    context : objects,
  });
  // run VI on current data
  var speakerPosterior = updatePosterior(dataSoFar[currTrial.speakerID], lexicalPrior, params);
  var listenerPosterior = updatePosterior(dataSoFar[currTrial.listenerID], lexicalPrior, params);

  // get marginal prediction of next data point over lexicon posterior
  var trialParams = extend(params, {partnerID: currTrial.partnerID});
  var speakerOutput = S(currTrial.intendedName, speakerPosterior, trialParams);
  var nextUtt = sample(speakerOutput);

  var listenerOutput = L(nextUtt, listenerPosterior, trialParams);
  var nextChoice = sample(listenerOutput);
  
  writeLine(currTrial, nextUtt, nextChoice, speakerOutput, listenerOutput);
  var newDataSoFar = _.zipObject(_.range(1, 6), map(function(id) {
    var trialPacket = extend(currTrial, {
      role: id == currTrial.speakerID ? "speaker" : "listener",
      wordID: nextUtt,
      clickedName: nextChoice
    });
    return (id == currTrial.speakerID || id == currTrial.listenerID ?
            dataSoFar[id].concat(trialPacket) : dataSoFar[id]);
  }, _.range(1, 6)));

  if(!_.isEmpty(rest(remainingTrials))) {
    iterate(outputFile, rest(remainingTrials), newDataSoFar);
  }
};

var trials = [
  // first partner
  {trialNum: 1, speakerID: 1, listenerID: 2, partnerID: 1, intendedName: 'bluecircle'},
  {trialNum: 2, speakerID: 1, listenerID: 2, partnerID: 1, intendedName: 'redsquare'},
  {trialNum: 3, speakerID: 2, listenerID: 1, partnerID: 1, intendedName: 'bluecircle'},
  {trialNum: 4, speakerID: 2, listenerID: 1, partnerID: 1, intendedName: 'redsquare'},
  {trialNum: 5, speakerID: 1, listenerID: 2, partnerID: 1, intendedName: 'bluecircle'},
  {trialNum: 6, speakerID: 1, listenerID: 2, partnerID: 1, intendedName: 'redsquare'},
  {trialNum: 7, speakerID: 2, listenerID: 1, partnerID: 1, intendedName: 'bluecircle'},
  {trialNum: 8, speakerID: 2, listenerID: 1, partnerID: 1, intendedName: 'redsquare'},

  {trialNum: 1, speakerID: 3, listenerID: 4, partnerID: 1, intendedName: 'bluecircle'},
  {trialNum: 2, speakerID: 3, listenerID: 4, partnerID: 1, intendedName: 'redsquare'},
  {trialNum: 3, speakerID: 4, listenerID: 3, partnerID: 1, intendedName: 'bluecircle'},
  {trialNum: 4, speakerID: 4, listenerID: 3, partnerID: 1, intendedName: 'redsquare'},
  {trialNum: 5, speakerID: 3, listenerID: 4, partnerID: 1, intendedName: 'bluecircle'},
  {trialNum: 6, speakerID: 3, listenerID: 4, partnerID: 1, intendedName: 'redsquare'},
  {trialNum: 7, speakerID: 4, listenerID: 3, partnerID: 1, intendedName: 'bluecircle'},
  {trialNum: 8, speakerID: 4, listenerID: 3, partnerID: 1, intendedName: 'redsquare'},
  // second partner
  {trialNum: 9, speakerID: 1, listenerID: 3, partnerID: 2, intendedName: 'bluecircle'},
  {trialNum: 10, speakerID: 1, listenerID: 3, partnerID: 2, intendedName: 'redsquare'},
  {trialNum: 11, speakerID: 3, listenerID: 1, partnerID: 2, intendedName: 'bluecircle'},
  {trialNum: 12, speakerID: 3, listenerID: 1, partnerID: 2, intendedName: 'redsquare'},
  {trialNum: 13, speakerID: 1, listenerID: 3, partnerID: 2, intendedName: 'bluecircle'},
  {trialNum: 14, speakerID: 1, listenerID: 3, partnerID: 2, intendedName: 'redsquare'},
  {trialNum: 15, speakerID: 3, listenerID: 1, partnerID: 2, intendedName: 'bluecircle'},
  {trialNum: 16, speakerID: 3, listenerID: 1, partnerID: 2, intendedName: 'redsquare'},

  {trialNum: 9, speakerID: 2, listenerID: 4, partnerID: 2, intendedName: 'bluecircle'},
  {trialNum: 10, speakerID: 2, listenerID: 4, partnerID: 2, intendedName: 'redsquare'},
  {trialNum: 11, speakerID: 4, listenerID: 2, partnerID: 2, intendedName: 'bluecircle'},
  {trialNum: 12, speakerID: 4, listenerID: 2, partnerID: 2, intendedName: 'redsquare'},
  {trialNum: 13, speakerID: 2, listenerID: 4, partnerID: 2, intendedName: 'bluecircle'},
  {trialNum: 14, speakerID: 2, listenerID: 4, partnerID: 2, intendedName: 'redsquare'},
  {trialNum: 15, speakerID: 4, listenerID: 2, partnerID: 2, intendedName: 'bluecircle'},
  {trialNum: 16, speakerID: 4, listenerID: 2, partnerID: 2, intendedName: 'redsquare'},
  // third partner
  {trialNum: 17, speakerID: 1, listenerID: 4, partnerID: 3, intendedName: 'bluecircle'},
  {trialNum: 18, speakerID: 1, listenerID: 4, partnerID: 3, intendedName: 'redsquare'},
  {trialNum: 19, speakerID: 4, listenerID: 1, partnerID: 3, intendedName: 'bluecircle'},
  {trialNum: 20, speakerID: 4, listenerID: 1, partnerID: 3, intendedName: 'redsquare'},
  {trialNum: 21, speakerID: 1, listenerID: 4, partnerID: 3, intendedName: 'bluecircle'},
  {trialNum: 22, speakerID: 1, listenerID: 4, partnerID: 3, intendedName: 'redsquare'},
  {trialNum: 23, speakerID: 4, listenerID: 1, partnerID: 3, intendedName: 'bluecircle'},
  {trialNum: 24, speakerID: 4, listenerID: 1, partnerID: 3, intendedName: 'redsquare'},

  {trialNum: 17, speakerID: 2, listenerID: 3, partnerID: 3, intendedName: 'bluecircle'},
  {trialNum: 18, speakerID: 2, listenerID: 3, partnerID: 3, intendedName: 'redsquare'},
  {trialNum: 19, speakerID: 3, listenerID: 2, partnerID: 3, intendedName: 'bluecircle'},
  {trialNum: 20, speakerID: 3, listenerID: 2, partnerID: 3, intendedName: 'redsquare'},
  {trialNum: 21, speakerID: 2, listenerID: 3, partnerID: 3, intendedName: 'bluecircle'},
  {trialNum: 22, speakerID: 2, listenerID: 3, partnerID: 3, intendedName: 'redsquare'},
  {trialNum: 23, speakerID: 3, listenerID: 2, partnerID: 3, intendedName: 'bluecircle'},
  {trialNum: 24, speakerID: 3, listenerID: 2, partnerID: 3, intendedName: 'redsquare'},
  // generalization
  {trialNum: 25, speakerID: 1, listenerID: 5, partnerID: 4, intendedName: 'bluecircle'},  
  {trialNum: 25, speakerID: 2, listenerID: 5, partnerID: 4, intendedName: 'bluecircle'},  
  {trialNum: 25, speakerID: 3, listenerID: 5, partnerID: 4, intendedName: 'bluecircle'},  
  {trialNum: 25, speakerID: 4, listenerID: 5, partnerID: 4, intendedName: 'bluecircle'},  
];

iterate(f, trials, {1: [], 2: [], 3: [], 4: [], 5: []});
csv.close(f);
