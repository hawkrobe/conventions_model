// run using, e.g.:
// webppl partnerspecificity.wppl --require ./refModule/ --require webppl-csv

var numUtterances = 2
var numStates = 2
var utterances = map(function(i) {return 'word' + i;}, _.range(1, numUtterances+1));
var states = map(function(i) {return 'object' + i;}, _.range(1, numUtterances+1));
var lexDims = [numUtterances, numStates];

var params = {
  alpha : argv.alpha,
  costWeight: argv.costWeight,
  model: argv.model,
  context: ['object1', 'object2'],
  primitiveUtterances: utterances,
  states : states,
  utterances : utterances
};

var tensorSoftplus = function(x) {
  return T.log(T.add(T.exp(x), 1));
};

var partnerGuide = function(paramName) {
  return function() {
    return DiagCovGaussian({
      mu: param({name: 'mu' + paramName, dims: lexDims}),
      sigma: tensorSoftplus(param({name: 'sigma' + paramName, dims: lexDims}))
    });
  };
};

var sampleLexicon = function(i) {
  var prior = DiagCovGaussian({mu: zeros(lexDims),
                               sigma: T.mul(ones(lexDims), 1)});
  if(params.model != 'no_pooling') {
    var hyperLex = sample(prior, {guide: partnerGuide('hyper')});
    if(params.model == 'hierarchical') {
      return sample(DiagCovGaussian({mu: hyperLex, sigma: T.mul(ones(lexDims), 1)}),
		    {guide: partnerGuide(i)});
    } else if(params.model == 'complete_pooling') {
      return hyperLex;
    }
  } else {
    return sample(prior, {guide: partnerGuide(i)});
  }
};

var observeRound = function(llex, datum) {
  // For listener, we observe the object they clicked given the utterance they heard
  var listenerScore = refModule.getListenerScore(datum.clickedName, datum.wordID,extend(params, {lexicon: llex}));
  factor(listenerScore);
};

// literal listener (using real-valued lexicon)
var L2 = function(utt, context, partner) {
  var lexicon = sampleLexicon(partner);
  
  return Infer({method:"enumerate"}, function(){
    var state = uniformDraw(context);
    var score = refModule.getSpeakerScore(utt, state, extend(params, {lexicon: lexicon}));
    factor(score);
    return state;
  });
};

// for each point in data, we want the model's predictions 
var iterate = function(outputFile, data) {
  return map(function(t) {
    // grab data up to this point
    var dataSoFar = data.slice(0,t);
    // run VI on current data

    Optimize({
      steps: 50000, verbose: true, optMethod: {adam: {stepSize: 0.001}},
      model: function() {
	var lexica = {1 : sampleLexicon(1),
		      2 : sampleLexicon(2),
		      3 : sampleLexicon(3),
		      4 : sampleLexicon(4)};
	mapData({data: dataSoFar}, function(trialDatum) {
	  var i = trialDatum.partnerID;
	  var lexicon = lexica[i];
	  observeRound(lexicon, trialDatum);
	});
      }
    });

    // get marginal prediction of next data point
    var nextDataPoint = data[t];
    var prediction = expectation(Infer({model: function() {
      var L = L2(nextDataPoint.wordID, ['object1', 'object2'],nextDataPoint.partnerID);
      return Math.exp(L.score(nextDataPoint.clickedName));
    }, method: 'forward', samples: 100000, guide: true}));
    csv.writeLine([argv.model, t, nextDataPoint.partnerID, argv.alpha,argv.costWeight, argv.chainNum, prediction].join(','), outputFile);
  }, _.range(data.length ));
};

var data = [{partnerID: 1, clickedName: 'object1', wordID: 'word1'},
	    {partnerID: 1, clickedName: 'object1', wordID: 'word1'},
	    {partnerID: 1, clickedName: 'object1', wordID: 'word1'},
	    {partnerID: 1, clickedName: 'object1', wordID: 'word1'},            
	    {partnerID: 2, clickedName: 'object1', wordID: 'word1'},
	    {partnerID: 2, clickedName: 'object1', wordID: 'word1'},
	    {partnerID: 2, clickedName: 'object1', wordID: 'word1'},
	    {partnerID: 2, clickedName: 'object1', wordID: 'word1'},            
	    {partnerID: 3, clickedName: 'object1', wordID: 'word1'},
	    {partnerID: 3, clickedName: 'object1', wordID: 'word1'},
	    {partnerID: 3, clickedName: 'object1', wordID: 'word1'},
	    {partnerID: 3, clickedName: 'object1', wordID: 'word1'},            
	    {partnerID: 4, clickedName: 'object1', wordID: 'word1'}];

var f = csv.open('./output/listenerOutput' + argv.model + argv.chainNum + '.csv');
csv.writeLine('model,time,partnerID,alpha,cost,chainNum,prediction',f);
iterate(f, data);
csv.close(f);
