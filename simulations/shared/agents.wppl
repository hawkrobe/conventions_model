var foreach = function(lst, fn) {
  var foreach_ = function(i) {
    if (i < lst.length) {
      fn(lst[i]);
      foreach_(i + 1);
    }
  };
  foreach_(0);
};

var L0 = cache(function(utt, params) {
  // handle contradictions
  if(!any(function(x){return shared.getLexiconElement(utt, x, params);}, params.objects)){
    return Categorical({vs: params.context});
  }
  return Mixture({
    dists: [
      Categorical({vs: params.context}),
      Infer({method: "enumerate"}, function() {
        var obj = uniformDraw(params.context.concat('bluecircle_redsquare'));
        factor(Math.log(shared.getLexiconElement(utt, obj, params)));
        return obj;
      })],
    ps: [params.guessingEpsilon, 1 - params.guessingEpsilon]
  });
}, 10000);

var updatePosterior_soft = function(data, lexicalPrior, params) {
  return Infer(params.inferOptions, function() {
    var lexicon = lexicalPrior();
    mapData({data: data}, function(trial) {
      var beta = Math.pow(params.discountFactor,  data.length - trial.trialNum);
      var object = trial.role == 'speaker' ? trial.clickedName : trial.intendedName;
      var trialParams = extend(params, {context: trial.context, lexicon: lexicon[trial.partnerID]});
      if(trial.role == 'speaker') {
        factor(beta * shared.getL1Score(object, trial.wordID, trialParams));
      } else {
        factor(beta * shared.getS1Score(trial.wordID, object, trialParams));
      }
    });
    return lexicon;
  });
};

var S_soft = function(object, posterior, params) {
  return Infer({method: "enumerate"}, function() {
    var utt = uniformDraw(params.utterances);
    var inf = expectation(posterior, function(lexicon) {
      var config = extend(params, {lexicon: lexicon[params.partnerID]});
      return shared.getL1Score(object, utt, config);
    });
    var utility = ((1-params.costWeight) * inf
                   - params.costWeight * shared.getUttCost(utt));

    factor(params.speakerAlpha * utility);
    return utt;
  });
};

var L_soft = function(utt, posterior, params) {
  return Infer({method: "enumerate"}, function() {
    var object = uniformDraw(params.context);
    var utility = expectation(posterior, function(lexicon) {
      return shared.getS1Score(utt, object, extend(params, {lexicon: lexicon[params.partnerID]}));
    });
    factor(params.listenerAlpha * utility);
    return object;
  });
};

var updatePosterior = function(data, lexicalPrior, params) {
  return Infer(params.inferOptions, function() {
    var lexicon = lexicalPrior();
    mapData({data: data.slice(-24)}, function(trial) {
      var beta = Math.pow(params.discountFactor,  data.length - trial.trialNum);
      var object = trial.role == 'speaker' ? trial.clickedName : trial.intendedName;
      var trialParams = extend(params, {context: trial.context, lexicon: lexicon[trial.partnerID]});
      if(trial.role == 'speaker') {
        // console.log(lexicon);
        // console.log(object, trial.wordID)
        // console.log('L1', shared.getL1Score(object, trial.wordID, trialParams));
        // console.log('L0', shared.getL0Score(object, trial.wordID, trialParams));
        var score = (params.pragmatics == 'L1' ?
                     shared.getL1Score(object, trial.wordID, trialParams) :
                     shared.getL0Score(object, trial.wordID, trialParams));
        factor(beta * score);
      } else {
        factor(beta * shared.getS1Score(trial.wordID, object, trialParams));
      }
    });
    return lexicon;
  });
};

var S = function(object, posterior, params) {
  return Infer({method: "enumerate"}, function() {
    var utt = uniformDraw(params.utterances);
    var inf = expectation(posterior, function(lexicon) {
      return (params.pragmatics == 'L1' ?
              shared.getL1Score(object, utt, extend(params, {lexicon: lexicon[params.partnerID]})) :
              shared.getL0Score(object, utt, extend(params, {lexicon: lexicon[params.partnerID]})));
    });
    var utility = ((1-params.costWeight) * inf
                   - params.costWeight * shared.getUttCost(utt));

    factor(params.speakerAlpha * utility);
    return utt;
  });
};

var L = function(utt, posterior, params) {
  return Infer({method: "enumerate"}, function() {
    var object = uniformDraw(params.context);
    var utility = expectation(posterior, function(lexicon) {
      return shared.getS1Score(utt, object, extend(params, {lexicon: lexicon[params.partnerID]}));
    });
    console.log(object);
    console.log(utility);
    factor(params.listenerAlpha * utility);
    return object;
  });
};
