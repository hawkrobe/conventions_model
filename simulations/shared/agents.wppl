// var L0 = cache(function(utt, params) {
//   return Mixture({
//     dists: [
//       Categorical({vs: params.context}),
//       Infer({method: "enumerate"}, function() {
//         var obj = uniformDraw(params.context);
//         factor(Math.log(shared.getLexiconElement(utt, obj, params.lexicon)));
//         return obj;
//       })],
//     ps: [params.guessingEpsilon, 1 - params.guessingEpsilon]
//   });
// }, 10000);

// var S1 = cache(function(obj, params) {
//   return Mixture({
//     dists: [
//       Categorical({vs: params.utterances}),
//       Infer({method: "enumerate"}, function() {
//         var utt = uniformDraw(params.utterances);
//         var utility = ((1-params.costWeight) * L0(utt, params).score(obj)
//                        - params.costWeight * shared.getUttCost(utt));
//         factor(params.speakerAlpha * utility);
//         return utt;
//       })],
//     ps: [params.guessingEpsilon, 1 - params.guessingEpsilon]
//   })
// }, 10000)

// var L1 = function(utt, params) {
//   return Mixture({
//     dists: [
//       Categorical({vs: params.context}),
//       Infer({method: "enumerate"}, function() {
//         var obj = uniformDraw(params.context);
//         factor(params.listenerAlpha * shared.getS1Score(utt, obj, params)); //S1(obj, params).score(utt));
//         return obj;
//       })],
//     ps: [params.guessingEpsilon, 1 - params.guessingEpsilon]
//   });
// };

var agents = function(globalParams) {
  var getL1Score = cache(function(object, utt, context, lexicon) {
    return shared.getL1Score(object, utt, extend(globalParams, {context, lexicon}));
  });

  var getS1Score = cache(function(object, utt, context, lexicon) {
    return shared.getS1Score(utt, object, extend(globalParams, {context, lexicon}));
  });


  var S = function(object, posterior, context) {
    return Infer({method: "enumerate"}, function() {
      var utt = uniformDraw(globalParams.utterances);
      var inf = expectation(posterior, function(lexicon) {
        return getL1Score(object, utt, context, lexicon);
      });
      var utility = ((1-globalParams.costWeight) * inf
                     - globalParams.costWeight * shared.getUttCost(utt));

      factor(globalParams.speakerAlpha * utility);
      return utt;
    });
  };

  var L = function(utt, posterior, context) {
    return Infer({method: "enumerate"}, function() {
      var object = uniformDraw(context);
      var utility = expectation(posterior, function(lexicon) {
        return shared.getS1Score(utt, object, extend(globalParams, {context, lexicon}));
      });
      factor(globalParams.listenerAlpha * utility);
      return object;
    });
  };

  var updatePosterior = function(data, lexicalPrior) {
    return Infer(globalParams.inferOptions, function() {
      var lexicon = lexicalPrior();
      mapData({data: data}, function(trial) {
        var beta = Math.pow(globalParams.discountFactor,  data.length - trial.trialNum);
        var object = trial.role == 'speaker' ? trial.clickedName : trial.intendedName;
        if(trial.role == 'speaker') {
          factor(beta * getL1Score(object, trial.wordID, trial.context, lexicon));
        } else {
          factor(beta * shared.getS1Score(trial.wordID, object, extend(globalParams, {context: trial.context, lexicon})));
        }
      });
      return lexicon;
    });
  };
  return {S, L, updatePosterior};
};
