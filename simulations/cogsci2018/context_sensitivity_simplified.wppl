// run using, e.g.:
// webppl partnerspecificity.wppl --require ./refModule/ --require webppl-csv -- --condition 'subOnly'
var numUtterances = 8;
var utterances = map(function(i) {return 'word' + i;}, _.range(1, numUtterances+1));
var objects = ['square_red_lightred', 'square_red_darkred',
               'square_blue_lightblue', 'square_blue_darkblue'];
var meanings = ['null', 'square', 'red', 'blue', 'lightred', 'lightblue', 'darkred', 'darkblue'];

var numMeanings = meanings.length;

var params = {
  speakerAlpha : argv.speakerAlpha,
  listenerAlpha: argv.listenerAlpha,
  discountFactor: argv.discountFactor,
  guessingEpsilon: 0.01,
  pragmatics: 'L0',
  costWeight: 0,
  utterances: utterances,
  objects: objects,
  numTrials: 15,
  inferOptions: {method: 'MCMC', samples:2500, burn:5000, lag:2, verbose:true}//
};

var posttest_file = shared.open('./output/meaningTest_' + argv.condition + '_' + argv.chainNum + '.csv');
shared.writeLine('chainNum,iterationNum,condition,speakerAlpha,listenerAlpha,discountFactor,guessingEpsilon,trialNum,\
                  contextType,agentID,object,word,val', posttest_file);

var f = shared.open('./output/trajectory_' + argv.condition + '_' + argv.chainNum + '.csv');
shared.writeLine('chainNum,iterationNum,condition,speakerAlpha,listenerAlpha,discountFactor,guessingEpsilon,time,\
                 contextType,speakerID,listenerID,intendedName,topSpeakerChoice,topListenerChoice,correctProb,correct',
                 f);

var extensionLookup = {
  'square' : ['darkred', 'darkblue', 'lightred', 'lightblue'],
  'red'    : ['darkred', 'lightred'],
  'blue'   : ['darkblue', 'lightblue'],
  'darkred':['darkred'],
  'lightred':['lightred'],
  'darkblue':['darkblue'],
  'lightblue':['lightblue'],
  'null':[]
};

var extensionSize = function(lexicon) {
  var combinedExtensions = reduce(function(value, rest) {
    return rest.concat(extensionLookup[value]);
  }, [], _.values(lexicon));
  return combinedExtensions.length;
};

var partitions = Infer({method: 'enumerate'}, function() {
  var lexicon = reduce(function(i, chosen) {
    var availableMeanings = filter(function(m1) {
      return all(function(m2) {
        return _.intersection(extensionLookup[m1], extensionLookup[m2]).length == 0;
      }, chosen);
    }, meanings);
    var meaning = sample(Categorical({vs: availableMeanings}));
    return chosen.concat(meaning);
  }, [], _.range(utterances.length));
  condition(extensionSize(lexicon) == 4);
  return lexicon;
}).support();

var lexicalPrior = function() {
  var lexicon = _.zipObject(utterances, map(function(utt) {
    return sample(Categorical({vs: meanings}));
  }, utterances));
  factor(-1 * extensionSize(lexicon));
  return {1 : lexicon};
};

// this is the alternative partition-based prior reviewers expected
// var lexicalPrior = function() {
//   var partition = uniformDraw(partitions);
//   factor(-1 * filter(function(x) {return x != 'null'}, partition).length);
//   return {1 : _.zipObject(utterances, partition)};
// };

var writeMeanings = function(trial, posterior1, posterior2) {
  var data = [
    argv.chainNum, trial.iterationNum, argv.condition, params.speakerAlpha, params.listenerAlpha,
    params.discountFactor,params.guessingEpsilon, trial.trialNum, trial.contextType
  ];
  map(function(word) {
    shared.writeMarginals(marginalize(posterior1, function(x) {return x[1][word];}),
                       posttest_file, data.concat([trial.speakerID, word]));
    shared.writeMarginals(marginalize(posterior2, function(x) {return x[1][word];}),
                       posttest_file, data.concat([trial.listenerID, word]));
  }, utterances);
};

var writeTrajectory= function(trial, topSpeakerChoice, topListenerChoice, listenerProb) {
  shared.writeLine([
    argv.chainNum, trial.iterationNum, argv.condition, params.speakerAlpha, params.listenerAlpha, params.discountFactor, params.guessingEpsilon,
    trial.trialNum, trial.contextType, trial.speakerID, trial.listenerID, trial.intendedName,
    topSpeakerChoice, topListenerChoice, listenerProb, topListenerChoice == trial.intendedName, 
  ].join(','), f);
}

var getDistractor = function(intendedName, contextType) {
  var otherObjs = remove(intendedName, objects);
  return (contextType == 's' ? find(function(obj) {
    return obj.split('_')[1] == intendedName.split('_')[1];
  }, otherObjs) : uniformDraw(filter(function(obj){
    return obj.split("_")[1] != intendedName.split("_")[1];
  }, otherObjs)));
};

// for each point in data, we want the model's predictions 
var iterate = function(i, remainingTargets, dataSoFar) {
  var target = first(remainingTargets)[0];
  var contextType = first(remainingTargets)[1];
  var trialNum = dataSoFar[1].length;
  var currTrial = {
    intendedName: target,
    contextType,
    trialNum,
    iterationNum: i,
    context : [target, getDistractor(target, contextType)],
    partnerID: 1,
    speakerID: (trialNum % 2) == 0 ? 1 : 2,
    listenerID: (trialNum % 2) == 0 ? 2 : 1
  };
  var config = extend(params, {context: currTrial.context, partnerID: currTrial.partnerID});
  // update posteriors
  var speakerPosterior = updatePosterior(dataSoFar[currTrial.speakerID], lexicalPrior, config);
  var listenerPosterior = updatePosterior(dataSoFar[currTrial.listenerID], lexicalPrior, config);
  
  // get marginal prediction of next data point over lexicon posterior
  var speakerOutput = S(currTrial.intendedName, speakerPosterior, config);
  var topSpeakerChoice =  sample(speakerOutput);
  var listenerOutput = L(topSpeakerChoice,  listenerPosterior, config);
  var topListenerChoice =  sample(listenerOutput);
  //display(marginalize(speakerPosterior, function(x) {return x[1][topSpeakerChoice];}));
  writeMeanings(currTrial, speakerPosterior, listenerPosterior);
  writeTrajectory(currTrial, topSpeakerChoice, topListenerChoice, Math.exp(listenerOutput.score(target)));
  var newDataSoFar = _.zipObject([currTrial.speakerID, currTrial.listenerID], map(function(id) {
    return dataSoFar[id].concat(extend(currTrial, {
      role : id == currTrial.speakerID ? 'speaker' : 'listener',
      wordID : topSpeakerChoice,
      clickedName : topListenerChoice
    }));
  }, [currTrial.speakerID, currTrial.listenerID]));

  if(currTrial.trialNum < params.numTrials) {
    iterate(i, rest(remainingTargets), newDataSoFar);
  } 
};

foreach(_.range(25), function(i) {
  var trialSeq = sample(Infer({method: 'rejection', samples: 1}, function() {
    var block1 = _.shuffle(objects.concat(objects));
    var block2 = block1.concat(_.shuffle(objects.concat(objects)));
    var blocks = block2.concat(_.shuffle(objects.concat(objects)));
    var bool = reduce(function(x, acc) {
      return [x, (x != acc[0]) && acc[1]];
    }, [last(blocks), true], blocks.slice(0,-1))[1];
    condition(bool);
    return blocks;
  }));

  var contextTypes1 = (argv.condition == 'subOnly' ? _.repeat('s', 8).split('') :
                       argv.condition == 'basicOnly' ? _.repeat('b', 8).split('') :
                       _.shuffle(_.repeat('s', 4) + _.repeat('b', 4)));
  var contextTypes2 = contextTypes1.concat((argv.condition == 'subOnly' ? _.repeat('s', 8).split('') :
                       argv.condition == 'basicOnly' ? _.repeat('b', 8).split('') :
                       _.shuffle(_.repeat('s', 4) + _.repeat('b', 4))));
  var contextTypes = contextTypes2.concat(argv.condition == 'subOnly' ? _.repeat('s', 8).split('') :
                                           argv.condition == 'basicOnly' ? _.repeat('b', 8).split('') :
                                           _.shuffle(_.repeat('s', 4) + _.repeat('b', 4)));
  iterate(i, _.zip(trialSeq,contextTypes), {1: [], 2: []});
});
shared.close(f);
shared.close(posttest_file);

