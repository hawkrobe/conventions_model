// run using, e.g.:
// webppl partnerspecificity.wppl --require ./refModule/ --require webppl-csv -- --gameNum 'game1'

var data = refModule.readCSV('input/' + argv.gameNum + '.csv');
var numUtterances = 8;
var utterances = map(function(i) {return 'word' + i;}, _.range(1, numUtterances+1));
var objects = ['shape_circle_striped_highstriped', 'shape_circle_striped_lowstriped',
               'shape_circle_spotted_highspotted', 'shape_circle_spotted_lowspotted',
               'shape_square_red_lightred', 'shape_square_red_darkred',
               'shape_square_blue_lightblue', 'shape_square_blue_darkblue'];
var meanings = ['null', 'shape', 'circle', 'striped', 'spotted', 
                'highstriped', 'lowstriped', 'lowspotted', 'highspotted',
                'square', 'red', 'blue',
                'lightred', 'lightblue', 'darkred', 'darkblue'];
var objectLookup = {
  'redSquare1' : 'shape_square_red_lightred', 'redSquare2' : 'shape_square_red_darkred',
  'blueSquare1' : 'shape_square_blue_lightblue', 'blueSquare2' : 'shape_square_blue_darkblue',
  'stripedCircle1' : 'shape_circle_striped_lowstriped', 'stripedCircle2' :'shape_circle_striped_highstriped',
  'spottedCircle1' : 'shape_circle_spotted_lowspotted', 'spottedCircle2' : 'shape_circle_spotted_highspotted'
};
var numMeanings = meanings.length;

var params = {
  speakerAlpha : 10,
  listenerAlpha: 5,
  epsilon: 0.000001,
  coord: argv.coord,
  discountFactor: argv.discountFactor,
  costWeight: 0,
  utterances: utterances.concat('null'),
  objects: objects
};

var pragStr = ('discount:' + params.discountFactor + '_coord:' + params.coord);
var posttestF = csv.open('./output/meaningTest_' + pragStr + '_' + argv.gameNum + '.csv');
csv.writeLine('i,gameNum,speakerAlpha,listenerAlpha,discountFactor,time,condition,agentID,word,meaning,prob', posttestF);

console.log(params);

var sampleLexicon = function() {
  var nullUtterance = {'null' : 'shape'};
  return extend(nullUtterance, _.zipObject(utterances, map(function(utt) {
    return sample(Categorical({vs: meanings}));
  }, utterances)));
};

var sampleUtterance = function() {
  return flip(0.01) ? 'null' : uniformDraw(utterances);
};

var sampleObject = function(context) {
  var nullObject = 'shape_striped_spotted_highstriped_highspotted_lowstriped_lowspotted_null';
  return flip(0.01) ? nullObject : uniformDraw(context);
};

var extensionSize = function(lexicon) {
  var flattened = _.flatten(map(function(key) {
    return filter(function(object) {
      return _.includes(object.split('_'), lexicon[key])
    }, objects);
  }, _.keys(lexicon)));
  return flattened.length;
};

var S = function(object, context, posterior) {
  return Infer({method: "enumerate"}, function() {
    var utt = uniformDraw(utterances);
    var utility = expectation(posterior, function(lexicon) {
      var config = extend(params, {lexicon: lexicon, context: context});
      return refModule.getListenerScore(object, utt, config);
    });
    factor(params.speakerAlpha * utility);
    return utt;
  });
};

var L = function(utt, context, posterior) {
  return Infer({method: "enumerate"}, function() {
    var object = uniformDraw(context);
    var utility = expectation(posterior, function(lexicon) {
      var config = extend(params, {lexicon: lexicon, context: context});
      return refModule.getSpeakerScore(utt, object, config);
    });
    factor(params.listenerAlpha * utility);
    return object;
  });
};

var updatePosterior = function(data) {
  return Infer({method: 'MCMC', samples:2000,burn:10000,lag:1, model : function() { // 

    // Implement simplicity prior (smaller lexicons preferred)
    var lexicon = sampleLexicon();
    //condition(_.uniq(_.values(lexicon)).length == _.keys(lexicon).length);
    factor(-1*extensionSize(lexicon));

    mapData({data: data}, function(trial) { 
      var discount = Math.pow(params.discountFactor,  data.length - trial.trialNum);
      var config = {lexicon: lexicon, context: trial.context};
      var objectToUse = (params.coord == 'diff' & trial.role == 'speaker' ? 
                         trial.clickedName : trial.intendedName);
      var pragmaticTerm = (trial.role == 'speaker' ?
                           refModule.getListenerScore(objectToUse, trial.wordID, extend(params, config)) :
                           refModule.getSpeakerScore(trial.wordID, objectToUse, extend(params, config)));
      factor(discount * pragmaticTerm);
    });
    return lexicon;
  }});
};

var postTest = function(trial, outputFile, posterior1, posterior2) {
  var data = [argv.gameNum, params.speakerAlpha, params.listenerAlpha, params.discountFactor,
              trial.trialNum, trial.condition];
  map(function(word) {
    csv.writeMarginals(marginalize(posterior1, function(x) {return x[word];}),
                       outputFile, data.concat([trial.speakerID, word]));
    csv.writeMarginals(marginalize(posterior2, function(x) {return x[word];}),
                       outputFile, data.concat([trial.listenerID, word]));
  }, utterances);
};

// for each point in data, we want the model's predictions 
var iterate = function(outputFile, remainingTrials, dataSoFar) {
  var currTrialRaw = first(remainingTrials);
  var currTrial = extend(currTrialRaw, {
    context : map(function(v) {return objectLookup[v];},
                  [currTrialRaw.object1name, currTrialRaw.object2name,
                   currTrialRaw.object3name, currTrialRaw.object4name]),
    intendedName: objectLookup[currTrialRaw['intendedName']]
  });

  // run VI on current data
  var speakerPosterior = updatePosterior(dataSoFar[currTrial.speakerID]);
  var listenerPosterior = updatePosterior(dataSoFar[currTrial.listenerID]);

  // get marginal prediction of next data point over lexicon posterior
  var speakerOutput = S(currTrial.intendedName, currTrial.context, speakerPosterior);
  var topSpeakerChoice =  sample(speakerOutput);

  var listenerOutput = L(topSpeakerChoice, currTrial.context, listenerPosterior);
  var topListenerChoice =  sample(listenerOutput);

  postTest(currTrial, posttestF, speakerPosterior, listenerPosterior);
  display('context is ' + currTrial.context);
  display('top speaker choice is ' + topSpeakerChoice);
  display('top listener choice is ' + topListenerChoice);
  display('intended: ' + currTrial.intendedName);
  display('correct? ' + (topListenerChoice == currTrial.intendedName));
  csv.writeLine([argv.gameNum, params.speakerAlpha, params.listenerAlpha, params.discountFactor, params.coord, 
                 currTrial.trialNum, currTrial.condition, currTrial.contextType,
                 currTrial.speakerID, currTrial.listenerID,
                 currTrial.intendedName,
                 topSpeakerChoice, topListenerChoice,
                 topListenerChoice == currTrial.intendedName
                ].join(','), outputFile);

  var newDataSoFar = _.zipObject([currTrial.speakerID, currTrial.listenerID], map(function(id) {
    return dataSoFar[id].concat(extend(currTrial, {
      role : id == currTrial.speakerID ? 'speaker' : 'listener',
      wordID : topSpeakerChoice,
      clickedName : topListenerChoice
    }));
  }, [currTrial.speakerID, currTrial.listenerID]));

  if(!_.isEmpty(rest(remainingTrials))) {
    iterate(outputFile, rest(remainingTrials), newDataSoFar);
  } 
};

var f = csv.open('./output/trajectory_' + pragStr + '_' + argv.gameNum + '.csv');
csv.writeLine('gameNum,speakerAlpha,listenerAlpha,discountFactor,coord,time,condition,contextType,speakerID,listenerID,' +
              'intendedName,topSpeakerChoice,topListenerChoice,correct',
              f);
iterate(f, data, {1: [], 2: []});
csv.close(f);

postTest('post', posttestF);
csv.close(posttestF);
